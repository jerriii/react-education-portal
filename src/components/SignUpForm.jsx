import { useForm } from "react-hook-form";
import PropTypes from "prop-types";
import Input from "../utils/Input";
import Button from "../utils/Button";
import { useState } from "react";

const SignUpForm = ({ customClass }) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const [isVisible, setisVisible] = useState({
    password: false,
    c_password: false,
  });
  const onSubmit = (data) => console.log(data);

  function handlePasswordVisibility(type) {
    switch (type) {
      case "password":
        setisVisible((prev) => ({ ...prev, password: !prev.password }));
        break;
      case "c_password":
        setisVisible((prev) => ({ ...prev, c_password: !prev.c_password }));
        break;
      default:
        break;
    }
  }

  return (
    <form
      method="post"
      className={`flex flex-col gap-3 w-fit pt-11 ${customClass}`}
      onSubmit={handleSubmit(onSubmit)}
    >
      <div className="grid grid-cols-2 gap-4 w-full">
        <Input
          type="text"
          name="first_name"
          id={"first_name"}
          inputProps={{ ...register("first_name", { required: true }) }}
        >
          First name *
        </Input>
        {errors.first_name && <p>First name is required.</p>}
        <Input
          type="text"
          name="last_name"
          id={"last_name"}
          inputProps={{ ...register("last_name") }}
        >
          Last name
        </Input>
      </div>

      <Input
        type="email"
        name="email_address"
        id={"email_address"}
        inputProps={{ ...register("email_address", { required: true }) }}
      >
        Email Address *
      </Input>
      {errors.email_address && <p>Email Address is required.</p>}

      <div className="grid grid-cols-2 gap-4 w-full">
        <Input
          type="text"
          name="country"
          id={"country"}
          inputProps={{ ...register("country", { required: true }) }}
        >
          Country *
        </Input>
        {errors.country && <p>Country is required.</p>}
        <Input
          type="tel"
          name="phone_number"
          id={"phone_number"}
          inputProps={{ ...register("phone_number", { required: true }) }}
        >
          Phone number
        </Input>
      </div>

      <div className="flex flex-row flex-nowrap w-full relative">
        <Input
          type={isVisible.password ? "text" : "password"}
          name="password"
          id={"password"}
          inputProps={{ ...register("password", { required: true }) }}
        >
          Password
        </Input>
        <span
          role="button"
          className="absolute right-5 bottom-5"
          onClick={() => handlePasswordVisibility("password")}
        >
          {isVisible.password ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 256 240"
              fill="none"
            >
              <path
                d="M219.2 36.75C219.2 34.5 218.4 33 216.8 31.5C215.2 30 213.6 29.25 211.2 29.25C208.8 29.25 207.2 30 205.6 31.5L184 51.75C168 44.25 149.6 39.75 128 37.5C88 41.25 56 54.75 33.6 78.75C11.2 102.75 0 116.25 0 120C0 123.75 12 137.25 33.6 161.25C39.2 167.25 44.8 172.5 52 177L30.4 198C28.8 199.5 28 201 28 203.25C28 205.5 28.8 207 30.4 208.5C32 210 33.6 210.75 36 210.75C38.4 210.75 40 210 41.6 208.5L217.6 42C218.4 40.5 219.2 39 219.2 36.75ZM57.6 160.5C38.4 144 25.6 130.5 19.2 120C26.4 108.75 39.2 95.25 57.6 79.5C76 63.75 100 54 128 52.5C144 53.25 159.2 57 172 63L158.4 75.75C149.6 70.5 140 67.5 128 67.5C112 67.5 99.2 72.75 88 82.5C76.8 92.25 72 105 72 120C72 131.25 75.2 141 80.8 149.25L64 165.75C61.6 164.25 59.2 162 57.6 160.5ZM92.8 138C89.6 132.75 88 126.75 88 120C88 109.5 92 100.5 100 93.75C108 87 116.8 82.5 128 82.5C135.2 82.5 141.6 84 146.4 87L92.8 138ZM222.4 78.75C219.2 75 215.2 72 212 69L200 80.25C218.4 96 231.2 109.5 237.6 120C230.4 131.25 217.6 144.75 199.2 160.5C180.8 176.25 156 186 128 187.5C115.2 186.75 103.2 184.5 92.7998 180.75L80.7998 192C95.1998 197.25 110.4 201 128 202.5C168 198.75 200 185.25 222.4 161.25C244.8 137.25 256 123.75 256 120C256 116.25 244 102.75 222.4 78.75Z"
                fill="black"
              />
              <path
                d="M128 157.5C124.8 157.5 121.6 156.75 118.4 156L105.6 168C112.8 171 120 172.5 128 172.5C144 172.5 156.8 167.25 168 157.5C178.4 147.75 184 135 184 120C184 112.5 182.4 105 179.2 99L166.4 111C167.2 114 168 117 168 120C168 130.5 164 139.5 156 146.25C148 153 139.2 157.5 128 157.5Z"
                fill="black"
              />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 240 160"
              fill="none"
            >
              <path
                d="M239.31 76.76C238.96 75.97 230.49 57.18 211.66 38.35C186.57 13.26 154.88 0 120 0C85.1199 0 53.4299 13.26 28.3399 38.35C9.5099 57.18 0.999904 76 0.689904 76.76C0.235036 77.7831 0 78.8903 0 80.01C0 81.1297 0.235036 82.2369 0.689904 83.26C1.0399 84.05 9.5099 102.83 28.3399 121.66C53.4299 146.74 85.1199 160 120 160C154.88 160 186.57 146.74 211.66 121.66C230.49 102.83 238.96 84.05 239.31 83.26C239.765 82.2369 240 81.1297 240 80.01C240 78.8903 239.765 77.7831 239.31 76.76ZM120 144C89.2199 144 62.3299 132.81 40.0699 110.75C30.9364 101.667 23.1658 91.3095 16.9999 80C23.1641 68.6894 30.9349 58.3318 40.0699 49.25C62.3299 27.19 89.2199 16 120 16C150.78 16 177.67 27.19 199.93 49.25C209.081 58.3296 216.869 68.6872 223.05 80C215.84 93.46 184.43 144 120 144ZM120 32C110.506 32 101.226 34.8152 93.3325 40.0895C85.439 45.3638 79.2867 52.8603 75.6537 61.6312C72.0207 70.402 71.0701 80.0532 72.9222 89.3643C74.7743 98.6754 79.3459 107.228 86.0588 113.941C92.7717 120.654 101.324 125.226 110.636 127.078C119.947 128.93 129.598 127.979 138.369 124.346C147.14 120.713 154.636 114.561 159.91 106.667C165.185 98.7738 168 89.4935 168 80C167.987 67.2737 162.925 55.0724 153.926 46.0735C144.928 37.0746 132.726 32.0132 120 32ZM120 112C113.671 112 107.484 110.123 102.222 106.607C96.9593 103.091 92.8578 98.0931 90.4358 92.2459C88.0138 86.3986 87.3801 79.9645 88.6148 73.7571C89.8495 67.5497 92.8972 61.8479 97.3725 57.3726C101.848 52.8973 107.55 49.8496 113.757 48.6149C119.964 47.3801 126.399 48.0138 132.246 50.4359C138.093 52.8579 143.091 56.9594 146.607 62.2218C150.123 67.4841 152 73.671 152 80C152 88.4869 148.628 96.6262 142.627 102.627C136.626 108.629 128.487 112 120 112Z"
                fill="black"
              />
            </svg>
          )}
        </span>
      </div>

      <div className="flex flex-row flex-nowrap w-full relative">
        <Input
          type={isVisible.c_password ? "text" : "password"}
          name="c_password"
          id={"c_password"}
          inputProps={{ ...register("c_password", { required: true }) }}
        >
          Confirm Password
        </Input>
        <span
          role="button"
          className="absolute right-5 bottom-5"
          onClick={() => handlePasswordVisibility("c_password")}
        >
          {isVisible.c_password ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 256 240"
              fill="none"
            >
              <path
                d="M219.2 36.75C219.2 34.5 218.4 33 216.8 31.5C215.2 30 213.6 29.25 211.2 29.25C208.8 29.25 207.2 30 205.6 31.5L184 51.75C168 44.25 149.6 39.75 128 37.5C88 41.25 56 54.75 33.6 78.75C11.2 102.75 0 116.25 0 120C0 123.75 12 137.25 33.6 161.25C39.2 167.25 44.8 172.5 52 177L30.4 198C28.8 199.5 28 201 28 203.25C28 205.5 28.8 207 30.4 208.5C32 210 33.6 210.75 36 210.75C38.4 210.75 40 210 41.6 208.5L217.6 42C218.4 40.5 219.2 39 219.2 36.75ZM57.6 160.5C38.4 144 25.6 130.5 19.2 120C26.4 108.75 39.2 95.25 57.6 79.5C76 63.75 100 54 128 52.5C144 53.25 159.2 57 172 63L158.4 75.75C149.6 70.5 140 67.5 128 67.5C112 67.5 99.2 72.75 88 82.5C76.8 92.25 72 105 72 120C72 131.25 75.2 141 80.8 149.25L64 165.75C61.6 164.25 59.2 162 57.6 160.5ZM92.8 138C89.6 132.75 88 126.75 88 120C88 109.5 92 100.5 100 93.75C108 87 116.8 82.5 128 82.5C135.2 82.5 141.6 84 146.4 87L92.8 138ZM222.4 78.75C219.2 75 215.2 72 212 69L200 80.25C218.4 96 231.2 109.5 237.6 120C230.4 131.25 217.6 144.75 199.2 160.5C180.8 176.25 156 186 128 187.5C115.2 186.75 103.2 184.5 92.7998 180.75L80.7998 192C95.1998 197.25 110.4 201 128 202.5C168 198.75 200 185.25 222.4 161.25C244.8 137.25 256 123.75 256 120C256 116.25 244 102.75 222.4 78.75Z"
                fill="black"
              />
              <path
                d="M128 157.5C124.8 157.5 121.6 156.75 118.4 156L105.6 168C112.8 171 120 172.5 128 172.5C144 172.5 156.8 167.25 168 157.5C178.4 147.75 184 135 184 120C184 112.5 182.4 105 179.2 99L166.4 111C167.2 114 168 117 168 120C168 130.5 164 139.5 156 146.25C148 153 139.2 157.5 128 157.5Z"
                fill="black"
              />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 240 160"
              fill="none"
            >
              <path
                d="M239.31 76.76C238.96 75.97 230.49 57.18 211.66 38.35C186.57 13.26 154.88 0 120 0C85.1199 0 53.4299 13.26 28.3399 38.35C9.5099 57.18 0.999904 76 0.689904 76.76C0.235036 77.7831 0 78.8903 0 80.01C0 81.1297 0.235036 82.2369 0.689904 83.26C1.0399 84.05 9.5099 102.83 28.3399 121.66C53.4299 146.74 85.1199 160 120 160C154.88 160 186.57 146.74 211.66 121.66C230.49 102.83 238.96 84.05 239.31 83.26C239.765 82.2369 240 81.1297 240 80.01C240 78.8903 239.765 77.7831 239.31 76.76ZM120 144C89.2199 144 62.3299 132.81 40.0699 110.75C30.9364 101.667 23.1658 91.3095 16.9999 80C23.1641 68.6894 30.9349 58.3318 40.0699 49.25C62.3299 27.19 89.2199 16 120 16C150.78 16 177.67 27.19 199.93 49.25C209.081 58.3296 216.869 68.6872 223.05 80C215.84 93.46 184.43 144 120 144ZM120 32C110.506 32 101.226 34.8152 93.3325 40.0895C85.439 45.3638 79.2867 52.8603 75.6537 61.6312C72.0207 70.402 71.0701 80.0532 72.9222 89.3643C74.7743 98.6754 79.3459 107.228 86.0588 113.941C92.7717 120.654 101.324 125.226 110.636 127.078C119.947 128.93 129.598 127.979 138.369 124.346C147.14 120.713 154.636 114.561 159.91 106.667C165.185 98.7738 168 89.4935 168 80C167.987 67.2737 162.925 55.0724 153.926 46.0735C144.928 37.0746 132.726 32.0132 120 32ZM120 112C113.671 112 107.484 110.123 102.222 106.607C96.9593 103.091 92.8578 98.0931 90.4358 92.2459C88.0138 86.3986 87.3801 79.9645 88.6148 73.7571C89.8495 67.5497 92.8972 61.8479 97.3725 57.3726C101.848 52.8973 107.55 49.8496 113.757 48.6149C119.964 47.3801 126.399 48.0138 132.246 50.4359C138.093 52.8579 143.091 56.9594 146.607 62.2218C150.123 67.4841 152 73.671 152 80C152 88.4869 148.628 96.6262 142.627 102.627C136.626 108.629 128.487 112 120 112Z"
                fill="black"
              />
            </svg>
          )}
        </span>
      </div>

      <Button type={"submit"} customClass={"w-fit mt-8"}>
        Sign Up
      </Button>
    </form>
  );
};

SignUpForm.propTypes = {
  customClass: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};

export default SignUpForm;
